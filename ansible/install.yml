---
- name: Install Jenkins with Nginx and Self-Signed SSL
  hosts: all
  become: true
  vars_files:
    - vars/all.yml

  tasks:
    - name: Install required system packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - docker.io
          - docker-compose
          - python3-pip
          - openssl
        state: present
        update_cache: yes

    - name: Ensure Docker is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create base directory structure
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ base_dir }}"
        - "{{ base_dir }}/certs"
        - "/var/lib/jenkins"
        - "{{ base_dir }}/nginx"
        - "{{ base_dir }}/nginx/conf.d"

    - name: Generate SSL private key
      openssl_privatekey:
        path: "{{ base_dir }}/certs/jenkins.key"
        size: 2048

    - name: Generate SSL CSR
      openssl_csr:
        path: "{{ base_dir }}/certs/jenkins.csr"
        privatekey_path: "{{ base_dir }}/certs/jenkins.key"
        common_name: "{{ jenkins_domain }}"
        organization_name: "Example Organization"
        country_name: "US"
        state_or_province_name: "State"
        locality_name: "City"

    - name: Generate self-signed SSL certificate
      openssl_certificate:
        path: "{{ base_dir }}/certs/jenkins.crt"
        privatekey_path: "{{ base_dir }}/certs/jenkins.key"
        csr_path: "{{ base_dir }}/certs/jenkins.csr"
        provider: selfsigned
        selfsigned_not_after: "+{{ cert_validity_days }}d"

    - name: Create docker-compose.yml
      copy:
        dest: "{{ base_dir }}/docker-compose.yml"
        content: |
          version: '3'

          services:
            jenkins:
              image: jenkins/jenkins
              container_name: jenkins
              restart: unless-stopped
              user: root
              privileged: true
              environment:
                - TZ={{ timezone }}
              volumes:
                - /var/lib/jenkins:/var/jenkins_home
                - /var/run/docker.sock:/var/run/docker.sock
              networks:
                - jenkins-network

            nginx:
              image: nginx:alpine
              container_name: nginx-proxy
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx/conf.d:/etc/nginx/conf.d
                - ./certs:/etc/nginx/certs
              depends_on:
                - jenkins
              networks:
                - jenkins-network

          networks:
            jenkins-network:
              driver: bridge

    - name: Create Nginx config
      copy:
        dest: "{{ base_dir }}/nginx/conf.d/jenkins.conf"
        content: |
          server {
              listen 80;
              server_name {{ jenkins_domain }};
              return 301 https://$host$request_uri;
          }

          server {
              listen 443 ssl;
              server_name {{ jenkins_domain }};

              ssl_certificate /etc/nginx/certs/jenkins.crt;
              ssl_certificate_key /etc/nginx/certs/jenkins.key;

              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers on;
              ssl_session_timeout 1d;
              ssl_session_cache shared:SSL:50m;

              # Jenkins reverse proxy
              location / {
                  # Use a fixed host header to avoid the duplicate host header issue
                  proxy_pass http://jenkins:8080;
                  proxy_set_header Host jenkins:8080;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;

                  # Required for Jenkins
                  proxy_http_version 1.1;
                  proxy_request_buffering off;
                  proxy_buffering off;

                  # Timeouts
                  proxy_connect_timeout 150;
                  proxy_send_timeout 100;
                  proxy_read_timeout 100;

                  # Don't limit data transfer
                  client_max_body_size 0;
              }
          }

    - name: Set permissions for Jenkins volume
      file:
        path: "/var/lib/jenkins"
        owner: 1000
        group: 1000
        mode: '0755'
        recurse: yes

    - name: Start Docker Compose services
      shell: docker-compose up -d
      args:
        chdir: "{{ base_dir }}"

    - name: Wait for Jenkins to start
      wait_for:
        host: localhost
        port: 443
        delay: 10
        timeout: 180

    - name: Add Jenkins domain to hosts file
      lineinfile:
        path: /etc/hosts
        line: "127.0.0.1 {{ jenkins_domain }}"
        state: present

    - name: Wait for Jenkins to initialize fully
      pause:
        seconds: 30
      
    - name: Get initial Jenkins admin password
      shell: docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword
      register: jenkins_password
      changed_when: false
      retries: 5
      delay: 10
      until: jenkins_password.rc == 0

    - name: Display Jenkins admin password
      debug:
        msg: "Initial Jenkins admin password: {{ jenkins_password.stdout }}"

    - name: Create Jenkins user
      shell: |
        docker exec jenkins bash -c "
        java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://localhost:8080/ -auth admin:{{ jenkins_password.stdout }} \
        groovy = << 'EOG'
        import jenkins.model.*
        import hudson.security.*

        def instance = Jenkins.getInstance()
        def realm = instance.getSecurityRealm()
        
        try {
          def user = realm.createAccount('{{ jenkins_user }}', '{{ jenkins_pass }}')
          user.setFullName('{{ jenkins_fullname }}')
          
          try {
            def emailProperty = Class.forName('hudson.tasks.Mailer\$UserProperty')
            def constructor = emailProperty.getConstructor(String.class)
            user.addProperty(constructor.newInstance('{{ jenkins_email }}'))
          } catch (Exception e) {
            println 'Could not set email: ' + e.getMessage()
          }
          
          user.save()
          println 'User {{ jenkins_user }} created successfully'
        } catch (Exception e) {
          println 'Error creating user: ' + e.getMessage()
          System.exit(1)
        }
        EOG
        "
      register: user_creation
      changed_when: "'created successfully' in user_creation.stdout"
      failed_when: user_creation.rc != 0
      ignore_errors: yes

    - name: Display user creation result
      debug:
        var: user_creation.stdout

    - name: Show access instructions
      debug:
        msg:
          - "Jenkins setup complete!"
          - "Access Jenkins at https://{{ jenkins_domain }} or using the server's IP address"
          - "Login with: {{ jenkins_user }} / {{ jenkins_pass }}"
          - "You will need to accept the self-signed certificate in your browser"
